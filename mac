#!/bin/bash

# Welcome to the daveaseeman laptop script!
# Be prepared to turn your laptop (or desktop)
# into an awesome development machine.

fancy_echo() {
  local fmt="$1"; shift

  # shellcheck disable=SC2059
  printf "\n$fmt\n" "$@"
}

append_to_file() {
  local file="$1"
  local text="$2"

  if ! grep -qs "^$text$" "$file"; then
    printf "\n%s\n" "$text" >> "$file"
  fi
}

create_bashrc_and_set_it_as_bashrc() {
  if [ ! -f "$HOME/.bashrc" ]; then
    touch "$HOME/.bashrc"
  fi

  bashrc="$HOME/.bashrc"
}

create_bash_profile_and_set_it_as_bash_profile() {
  if [ ! -f "$HOME/.bash_profile" ]; then
    touch "$HOME/.bash_profile"
  fi

  bash_profile="$HOME/.bash_profile"
}

brew_is_installed() {
  brew list -1 | grep -Fqx "$1"
}

tap_is_installed() {
  brew tap -1 | grep -Fqx "$1"
}

app_is_installed() {
  local app_name
  app_name=$(echo "$1" | cut -d'-' -f1)
  find /Applications -iname "$app_name*" -maxdepth 1 | egrep '.*' > /dev/null
}

append_to_file "$bashrc" 'ucolor=$(tput setaf 33);'
append_to_file "$bashrc" 'wcolor=$(tput setaf 34);'
append_to_file "$bashrc" 'white=$(tput setaf 15);'
append_to_file "$bashrc" 'bold=$(tput setaf bold);'
append_to_file "$bashrc" 'reset=$(tput setaf sgr0);'
append_to_file "$bashrc" 'PS1='\[${ucolor}\]\u';  # `user`'
append_to_file "$bashrc" 'PS1+='\[${white}\]/';   # /'
append_to_file "$bashrc" 'PS1+='\[${bold}\]';     # bold'
append_to_file "$bashrc" 'PS1+='\[${wcolor}\]\W'; # `working directory`'
append_to_file "$bashrc" 'PS1+='\[${reset}\]';    # reset'
append_to_file "$bashrc" 'PS1+='\[${white}\]: ';  # white'
append_to_file "$bashrc" 'export PS1;ï»¿'


append_to_file "$bash_profile" '# import style from .bashrc'
append_to_file "$bash_profile" 'if [ -f ~/.bashrc ]; then'
append_to_file "$bash_profile" '	source ~/.bashrc'
append_to_file "$bash_profile" 'fi"'

append_to_file "$bash_profile" "alias laptop='bash <(curl -s https://raw.githubusercontent.com/daveaseeman/laptop/master/laptop)'"

# shellcheck disable=SC2016
append_to_file "$bash_profile" 'export PATH="$HOME/.bin:$PATH"'

if ! command -v brew >/dev/null; then
  fancy_echo "Installing Homebrew ..."
    curl -fsS \
      'https://raw.githubusercontent.com/Homebrew/install/master/install' | ruby

    # shellcheck disable=SC2016
    append_to_file "$bash_profile" 'export PATH="/usr/local/bin:$PATH"'
else
  fancy_echo "Homebrew already installed. Skipping ..."
fi

# Remove brew-cask since it is now installed as part of brew tap caskroom/cask.
# See https://github.com/caskroom/homebrew-cask/releases/tag/v0.60.0
if brew_is_installed 'brew-cask'; then
  brew uninstall --force 'brew-cask'
fi

if tap_is_installed 'caskroom/versions'; then
  brew untap caskroom/versions
fi

fancy_echo "Updating Homebrew ..."
cd "$(brew --repo)" && git fetch && git reset --hard origin/master && brew update

fancy_echo "Verifying the Homebrew installation..."
if brew doctor; then
  fancy_echo "Your Homebrew installation is good to go."
else
  fancy_echo "Your Homebrew installation reported some errors or warnings."
  echo "Review the Homebrew messages to see if any action is needed."
fi

fancy_echo "Installing formulas and casks from the Brewfile ..."
if brew bundle --file="$HOME/Brewfile"; then
  fancy_echo "All formulas and casks were installed successfully."
else
  fancy_echo "Some formulas or casks failed to install."
  echo "This is usually due to one of the Mac apps being already installed,"
  echo "in which case, you can ignore these errors."
fi

append_to_file "$bash_profile" 'alias python=python3'
append_to_file "$bash_profile" 'alias pip=pip3'

# shellcheck disable=SC2016
append_to_file "$bash_profile" 'eval "$(hub alias -s)"'

append_to_file "$HOME/.gemrc" 'gem: --no-document'

fancy_echo 'Updating Rubygems...'
gem update --system

gem_install_or_update 'bundler'

fancy_echo "Configuring Bundler ..."
number_of_cores=$(sysctl -n hw.ncpu)
bundle config --global jobs $((number_of_cores - 1))

fancy_echo '...Finished Ruby installation checks.'

if [ -f "$HOME/.laptop.local" ]; then
  # shellcheck source=/dev/null
  . "$HOME/.laptop.local"
fi

fancy_echo 'All done!'
